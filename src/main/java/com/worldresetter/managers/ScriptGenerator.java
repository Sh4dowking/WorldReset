package com.worldresetter.managers;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.List;

import com.worldresetter.config.Constants;
import com.worldresetter.utils.LoggerUtil;

/**
 * Generates bash scripts for world reset and server restart operations.
 * 
 * This class creates comprehensive bash scripts that handle server shutdown,
 * world deletion, cache cleanup, and server restart with proper error handling
 * and logging. The generated scripts are designed to run independently of the
 * Java process to ensure reliable execution.
 * 
 * @author Sh4dowking
 * @version 1.0.0
 * @since 1.0.0
 */
public class ScriptGenerator {
    
    private final File serverDirectory;
    private final WorldManager worldManager;
    
    /**
     * Constructs a new ScriptGenerator instance.
     * 
     * @param serverDirectory The server directory where scripts will be created
     * @param worldManager The WorldManager instance for world operations
     * @throws IllegalArgumentException if parameters are null or invalid
     */
    public ScriptGenerator(File serverDirectory, WorldManager worldManager) {
        if (serverDirectory == null || !serverDirectory.exists()) {
            throw new IllegalArgumentException("Server directory must exist");
        }
        if (worldManager == null) {
            throw new IllegalArgumentException("WorldManager cannot be null");
        }
        
        this.serverDirectory = serverDirectory;
        this.worldManager = worldManager;
        
        LoggerUtil.debug("ScriptGenerator initialized for directory: " + serverDirectory.getAbsolutePath());
    }
    
    /**
     * Generates and writes a complete restart script for world reset operations.
     * The script includes server shutdown, world cleanup, and server restart.
     * 
     * @param currentLevelName The current level name from server.properties
     * @return true if the script was generated successfully, false otherwise
     */
    public boolean generateRestartScript(String currentLevelName) {
        try {
            File restartScript = new File(serverDirectory, Constants.RESTART_SCRIPT_NAME);
            
            String scriptContent = buildScriptContent(currentLevelName);
            
            // Write the script content to file
            Files.write(restartScript.toPath(), scriptContent.getBytes());
            
            // Make the script executable
            boolean executable = restartScript.setExecutable(true);
            if (!executable) {
                LoggerUtil.warning("Could not make restart script executable");
            }
            
            LoggerUtil.logSuccess("Generated restart script: " + restartScript.getAbsolutePath());
            return true;
            
        } catch (IOException e) {
            LoggerUtil.severe("Failed to generate restart script", e);
            return false;
        }
    }
    
    /**
     * Builds the complete script content for the restart script.
     * 
     * @param currentLevelName The current level name to delete
     * @return The complete script content as a string
     */
    private String buildScriptContent(String currentLevelName) {
        StringBuilder script = new StringBuilder();
        
        // Script header and initialization
        appendScriptHeader(script);
        
        // Process cleanup section
        appendProcessCleanup(script);
        
        // World deletion section
        appendWorldDeletion(script, currentLevelName);
        
        // Cache cleanup section
        appendCacheCleanup(script);
        
        // Old world cleanup section
        appendOldWorldCleanup(script, currentLevelName);
        
        // Server startup section
        appendServerStartup(script);
        
        // Script footer
        appendScriptFooter(script);
        
        return script.toString();
    }
    
    /**
     * Appends the script header with initialization and logging setup.
     * 
     * @param script The StringBuilder to append to
     */
    private void appendScriptHeader(StringBuilder script) {
        script.append("#!/bin/bash\n")
              .append("\n")
              .append("# WorldResetter Plugin - Automated World Reset Script\n")
              .append("# Generated by WorldResetter v").append(Constants.PLUGIN_VERSION).append("\n")
              .append("# This script runs independently to ensure reliable execution\n")
              .append("\n")
              .append("# Make this script run completely independently\n")
              .append("# Detach from parent process and run in background\n")
              .append("exec </dev/null\n")
              .append("exec >/dev/null\n")
              .append("exec 2>/dev/null\n")
              .append("\n")
              .append("# Ensure logs directory exists\n")
              .append("mkdir -p ").append(Constants.LOGS_DIR).append("\n")
              .append("\n")
              .append("# Create a log file for debugging in logs folder\n")
              .append("LOG_FILE=\"").append(Constants.LOGS_DIR).append("/").append(Constants.WORLD_RESET_LOG_PREFIX).append("$(date +%Y%m%d_%H%M%S).log\"\n")
              .append("exec > >(tee -a \"$LOG_FILE\")\n")
              .append("exec 2>&1\n")
              .append("\n")
              .append("echo \"=== WORLD RESET STARTED AT $(date) ===\"\n")
              .append("echo 'Server shut down. Beginning world reset process...'\n")
              .append("echo 'Script generated by WorldResetter v").append(Constants.PLUGIN_VERSION).append("'\n")
              .append("\n");
    }
    
    /**
     * Appends the process cleanup section to handle server shutdown.
     * 
     * @param script The StringBuilder to append to
     */
    private void appendProcessCleanup(StringBuilder script) {
        script.append("# Run everything in a subshell to ensure independence\n")
              .append("(\n")
              .append("    # Wait for server to fully shut down and release file locks\n")
              .append("    echo 'Waiting for server to fully shut down...'\n")
              .append("    sleep ").append(Constants.PROCESS_CLEANUP_DELAY).append("\n")
              .append("\n")
              .append("    # Kill any remaining Java processes (allow failures)\n")
              .append("    echo 'Ensuring all server processes are terminated...'\n");
        
        for (String pattern : Constants.JAVA_PROCESS_PATTERNS) {
            script.append("    pkill -f '").append(pattern).append("' 2>/dev/null || echo 'No ").append(pattern).append(" processes found'\n");
        }
        
        script.append("    sleep ").append(Constants.FORCE_KILL_DELAY).append("\n")
              .append("\n");
    }
    
    /**
     * Appends the world deletion section for current world directories.
     * 
     * @param script The StringBuilder to append to
     * @param currentLevelName The current level name to delete
     */
    private void appendWorldDeletion(StringBuilder script, String currentLevelName) {
        script.append("    # Function to safely delete directories (allow failures)\n")
              .append("    safe_delete() {\n")
              .append("        local dir=\"$1\"\n")
              .append("        if [ -d \"$dir\" ]; then\n")
              .append("            echo \"Deleting directory: $dir\"\n")
              .append("            if rm -rf \"$dir\"; then\n")
              .append("                echo \"✓ Successfully deleted $dir\"\n")
              .append("            else\n")
              .append("                echo \"✗ Failed to delete $dir (continuing anyway)\"\n")
              .append("            fi\n")
              .append("        else\n")
              .append("            echo \"Directory $dir does not exist, skipping\"\n")
              .append("        fi\n")
              .append("    }\n")
              .append("\n")
              .append("    # Delete current world directories\n")
              .append("    echo '=== DELETING CURRENT WORLD DIRECTORIES ==='\n")
              .append("    echo 'Current level-name to delete: ").append(currentLevelName).append("'\n");
        
        List<String> worldDirs = worldManager.getWorldDirectoriesToDelete(currentLevelName);
        for (String worldDir : worldDirs) {
            script.append("    safe_delete \"").append(worldDir).append("\"\n");
        }
        
        script.append("\n");
    }
    
    /**
     * Appends the cache cleanup section for cache files and directories.
     * 
     * @param script The StringBuilder to append to
     */
    private void appendCacheCleanup(StringBuilder script) {
        script.append("    # Delete cache files (allow failures)\n")
              .append("    echo '=== DELETING CACHE FILES ==='\n");
        
        for (String cacheFile : worldManager.getCacheFiles()) {
            script.append("    rm -f ").append(cacheFile).append(" 2>/dev/null && echo '✓ Deleted ").append(cacheFile).append("' || echo '✓ ").append(cacheFile).append(" not found'\n");
        }
        
        script.append("\n")
              .append("    # Delete cache directories (allow failures)\n")
              .append("    echo '=== DELETING CACHE DIRECTORIES ==='\n");
        
        for (String cacheDir : worldManager.getCacheDirectories()) {
            script.append("    safe_delete \"").append(cacheDir).append("\"\n");
        }
        
        script.append("\n")
              .append("    # Delete Paper-specific cache files (allow failures)\n")
              .append("    rm -rf paper-*.jar.cache/ 2>/dev/null && echo '✓ Deleted Paper cache' || echo '✓ No Paper cache found'\n")
              .append("\n")
              .append("    # Delete world-specific files using patterns (allow failures)\n");
        
        for (String pattern : worldManager.getWorldDataPatterns()) {
            script.append("    find . -maxdepth 2 -name '").append(pattern).append("' -delete 2>/dev/null && echo '✓ Deleted ").append(pattern).append(" files' || echo '✓ No ").append(pattern).append(" files found'\n");
        }
        
        script.append("\n");
    }
    
    /**
     * Appends the old world cleanup section to remove leftover directories.
     * 
     * @param script The StringBuilder to append to
     * @param currentLevelName The current level name to exclude from cleanup
     */
    private void appendOldWorldCleanup(StringBuilder script, String currentLevelName) {
        script.append("    # Clean up any leftover world directories from previous resets\n")
              .append("    echo '=== CLEANING UP OLD WORLD DIRECTORIES ==='\n")
              .append("    find . -maxdepth 1 -type d -name '").append(Constants.WORLD_NAME_PREFIX).append("*' -not -name '").append(currentLevelName).append("' -exec rm -rf {} + 2>/dev/null && echo '✓ Cleaned up old world directories' || echo '✓ No old world directories found'\n")
              .append("    find . -maxdepth 1 -type d -name '").append(Constants.WORLD_NAME_PREFIX).append("*").append(Constants.NETHER_SUFFIX).append("' -not -name '").append(currentLevelName).append(Constants.NETHER_SUFFIX).append("' -exec rm -rf {} + 2>/dev/null && echo '✓ Cleaned up old nether directories' || echo '✓ No old nether directories found'\n")
              .append("    find . -maxdepth 1 -type d -name '").append(Constants.WORLD_NAME_PREFIX).append("*").append(Constants.END_SUFFIX).append("' -not -name '").append(currentLevelName).append(Constants.END_SUFFIX).append("' -exec rm -rf {} + 2>/dev/null && echo '✓ Cleaned up old end directories' || echo '✓ No old end directories found'\n")
              .append("\n");
    }
    
    /**
     * Appends the server startup section to restart the server.
     * 
     * @param script The StringBuilder to append to
     */
    private void appendServerStartup(StringBuilder script) {
        script.append("    echo '=== WORLD DELETION COMPLETED ==='\n")
              .append("    echo 'All world files and caches have been processed!'\n")
              .append("    sleep 2\n")
              .append("\n")
              .append("    # Find server jar file\n")
              .append("    echo '=== FINDING SERVER JAR ==='\n")
              .append("    JAR_FILE=\"\"\n")
              .append("    if ls paper-*.jar 1> /dev/null 2>&1; then\n")
              .append("        JAR_FILE=$(ls -t paper-*.jar | head -1)\n")
              .append("        echo \"Found Paper jar: $JAR_FILE\"\n")
              .append("    elif [ -f \"server.jar\" ]; then\n")
              .append("        JAR_FILE=\"server.jar\"\n")
              .append("        echo \"Found server.jar\"\n")
              .append("    else\n")
              .append("        echo '✗ ERROR: No server jar file found!'\n")
              .append("        echo 'Available jar files:'\n")
              .append("        ls -la *.jar 2>/dev/null || echo 'No jar files found'\n")
              .append("        echo 'CRITICAL: Cannot start server without jar file!'\n")
              .append("        exit 1\n")
              .append("    fi\n")
              .append("\n")
              .append("    # Kill any existing screen sessions\n")
              .append("    echo '=== CLEANING UP OLD SESSIONS ==='\n")
              .append("    if screen -list | grep -q '").append(Constants.SCREEN_SESSION_NAME).append("'; then\n")
              .append("        echo 'Terminating existing ").append(Constants.SCREEN_SESSION_NAME).append(" session...'\n")
              .append("        screen -S ").append(Constants.SCREEN_SESSION_NAME).append(" -X quit 2>/dev/null || echo 'Failed to quit existing session'\n")
              .append("        sleep 2\n")
              .append("    fi\n")
              .append("\n")
              .append("    echo \"=== STARTING SERVER ===\"\n")
              .append("    echo \"World reset completed successfully at $(date)!\"\n")
              .append("    echo \"Starting server with $JAR_FILE in screen session '").append(Constants.SCREEN_SESSION_NAME).append("'\"\n")
              .append("    echo \"The new world will be generated with a completely fresh seed!\"\n")
              .append("    sleep 2\n")
              .append("\n")
              .append("    # Start the server in screen session with explicit error checking\n")
              .append("    echo 'Creating screen session...'\n")
              .append("    if screen -dmS ").append(Constants.SCREEN_SESSION_NAME).append(" bash -c \"java -Xmx").append(Constants.JVM_MAX_MEMORY).append(" -Xms").append(Constants.JVM_MIN_MEMORY).append(" -jar '$JAR_FILE' nogui; echo 'Server stopped - press any key to exit'; read\"; then\n")
              .append("        echo '✓ Screen session created successfully'\n")
              .append("        sleep ").append(Constants.VERIFICATION_DELAY).append("\n")
              .append("        \n")
              .append("        # Verify server is running\n")
              .append("        if screen -list | grep -q '").append(Constants.SCREEN_SESSION_NAME).append("'; then\n")
              .append("            echo '✓ Server is running in screen session ").append(Constants.SCREEN_SESSION_NAME).append("'\n")
              .append("            echo '✓ World reset and server restart completed successfully!'\n")
              .append("        else\n")
              .append("            echo '✗ ERROR: Screen session not found after startup'\n")
              .append("        fi\n")
              .append("    else\n")
              .append("        echo '✗ ERROR: Failed to create screen session'\n")
              .append("        echo 'Attempting direct server start...'\n")
              .append("        java -Xmx").append(Constants.JVM_MAX_MEMORY).append(" -Xms").append(Constants.JVM_MIN_MEMORY).append(" -jar \"$JAR_FILE\" nogui &\n")
              .append("        echo 'Server started in background (PID: $!)'\n")
              .append("    fi\n");
    }
    
    /**
     * Appends the script footer with final logging.
     * 
     * @param script The StringBuilder to append to
     */
    private void appendScriptFooter(StringBuilder script) {
        script.append("\n")
              .append(") 2>&1 | tee -a \"$LOG_FILE\"\n")
              .append("\n")
              .append("echo \"=== WORLD RESET SCRIPT COMPLETED AT $(date) ===\"\n")
              .append("echo \"Log file: $LOG_FILE\"\n")
              .append("echo \"Screen session: ").append(Constants.SCREEN_SESSION_NAME).append("\"\n")
              .append("echo \"Use 'screen -r ").append(Constants.SCREEN_SESSION_NAME).append("' to attach to the server console\"\n");
    }
    
    /**
     * Gets the expected path to the restart script.
     * 
     * @return File object pointing to the restart script location
     */
    public File getRestartScriptFile() {
        return new File(serverDirectory, Constants.RESTART_SCRIPT_NAME);
    }
}
